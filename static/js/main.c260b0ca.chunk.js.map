{"version":3,"sources":["constants/general.ts","components/StatisticCard.tsx","components/LoadingWheel.tsx","api/Covid19Api.ts","components/GlobalStatistics.tsx","components/CountryAreaChart.tsx","components/SearchForm.tsx","App.tsx","index.tsx"],"names":["COVID_19_BASE_API_URL","TOTAL_CONFIRMED","TOTAL_DEATHS","TOTAL_RECOVERED","DATE_PARSING_OPTIONS_CHARTS","year","month","day","DATE_PARSING_OPTIONS_GLOBAL","hour","minute","second","StatisticCard","props","title","dateString","statistic","date","Date","parse","toLocaleDateString","avatarIcon","BugReport","ReportOutlined","Security","avatarClassNames","classNames","typographyClassNames","Card","className","variant","CardHeader","classes","avatar","subheader","CardContent","root","Typography","component","LoadingWheel","CircularProgress","size","color","thickness","getCovid19Statistics","a","axios","get","then","result","data","getCovid19Countries","getCovid19StatisticsByCountryAndStatus","country","status","GlobalStatistics","useState","covid19Statistics","setCovid19Statistics","loading","setLoading","useEffect","getCovid19Stats","Global","TotalConfirmed","TotalDeaths","TotalRecovered","CountryAreaChart","undefined","covid19CountryStatistics","setCovid19CountryStatistics","covid19StatisticsByCountry","covid19StatisticsByCountryDeaths","covid19StatisticsByCountryRecovered","handleCovid19StatisticsByCountry","covid19ResultWithConfirmed","handleCovid19StatisticsByCountryDeaths","covid19ResultWithDeaths","handleCovid19StatisticsByCountryRecovered","covid19ResultWithRecovered","getCovid19CountryStatistics","Object","keys","length","map","dateToString","parseDate","Confirmed","Cases","countryFound","find","countryWithConfirmed","Deaths","countryWithDeaths","Recovered","countryDate","style","width","height","ResponsiveContainer","AreaChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","verticalAlign","Area","type","fillOpacity","stroke","fill","SearchForm","input","setInput","countries","setCountries","getCovid19CountriesByApi","sort","countryA","countryB","Country","toLowerCase","FormControl","InputLabel","id","Select","value","onChange","event","target","setCountryState","labelId","MenuItem","Slug","FormHelperText","App","setCountry","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c260b0ca.chunk.js","sourcesContent":["// Api Related\n// Pre-release API is: https://production.covid19api.com\nexport const COVID_19_BASE_API_URL = 'https://api.covid19api.com';\n\n// General\nexport const COVID_19_HEADER = 'COVID-19 Statistics';\nexport const TOTAL_CONFIRMED = 'Total Confirmed';\nexport const TOTAL_DEATHS = 'Total Deaths';\nexport const TOTAL_RECOVERED = 'Total Recovered';\n\nexport const FOOTER_GENERAL_HEADER = 'About this data';\nexport const FOOTER_RAPID_HEADER = 'It changes rapidly';\nexport const FOOTER_RAPID_PARAGRAPH = `\nThis data changes rapidly, so what’s shown may be out of date.\nInformation about reported cases is also available on the World Health\nOrganization site.`;\nexport const FOOTER_CASES_HEADER = 'It doesn’t include all cases';\nexport const FOOTER_CASES_PARAGRAPH = `\nConfirmed cases aren’t all cases. They only include people who tested\npositive. Testing rules and availability vary by country.\n`;\n\n// SearchForm\nexport const SEARCH_FORM_INPUT_TEXT = 'Country';\nexport const SEARCH_FORM_HELPER_TEXT = 'Select the Country for which you require Statistics.';\n\n// CountryAreaChart\nexport const NO_DATA_FOUND = 'No Data could be found for this Country.';\n\nexport const DATE_PARSING_OPTIONS_CHARTS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nexport const DATE_PARSING_OPTIONS_GLOBAL = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n};\n","// React\nimport React from 'react';\n\n// CSS\nimport './StatisticCard.scss';\n\n// External\nimport classNames from 'classnames';\n\n// Material UI\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Typography from '@material-ui/core/Typography';\n\n// Icons\nimport { BugReport, ReportOutlined, Security } from '@material-ui/icons';\n\n// Constants\nimport { TOTAL_CONFIRMED, TOTAL_DEATHS, TOTAL_RECOVERED, DATE_PARSING_OPTIONS_GLOBAL } from '../constants/general';\n\n// Interface\ninterface IStatisticCardProps {\n  title: string;\n  dateString: string;\n  statistic: number;\n}\n\nconst StatisticCard: React.FC<IStatisticCardProps> = (props) => {\n  const { title, dateString, statistic } = props;\n\n  /**\n   * Parses the incoming dateString to a Date object.\n   *\n   * @param {string} dateString\n   *\n   * @returns {string}\n   */\n  const parseDateString = (): string => {\n    const date = new Date(Date.parse(dateString));\n    //@ts-ignore\n    return date.toLocaleDateString('nl-NL', DATE_PARSING_OPTIONS_GLOBAL);\n  };\n\n  /**\n   * Checks which Avatar Icon to get and returns it.\n   *\n   * @returns {BugReport || ReportOutlined || Security}\n   */\n  const getAvatarIcon = () => {\n    return title === TOTAL_CONFIRMED ? (\n      <BugReport />\n    ) : title === TOTAL_DEATHS ? (\n      <ReportOutlined />\n    ) : title === TOTAL_RECOVERED ? (\n      <Security />\n    ) : (\n      ''\n    );\n  };\n\n  // Parsing incoming DateString\n  const date = parseDateString();\n\n  // Dynamic rendering of the Icon & Classes happens here.\n  const avatarIcon = getAvatarIcon();\n\n  const avatarClassNames = classNames('StatisticCard__Avatar', {\n    'StatisticCard__Avatar--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Avatar--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Avatar--recovered': title === TOTAL_RECOVERED,\n  });\n\n  const typographyClassNames = classNames('StatisticCard__Content', {\n    'StatisticCard__Content--confirmed': title === TOTAL_CONFIRMED,\n    'StatisticCard__Content--deaths': title === TOTAL_DEATHS,\n    'StatisticCard__Content--recovered': title === TOTAL_RECOVERED,\n  });\n\n  return (\n    <Card className=\"StatisticCard\" variant=\"outlined\">\n      <CardHeader\n        classes={{ avatar: avatarClassNames }}\n        avatar={avatarIcon}\n        title={title}\n        subheader={`Updated at: ${date}`}\n      />\n      <CardContent classes={{ root: typographyClassNames }}>\n        <Typography variant=\"h4\" component=\"p\">\n          {statistic}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StatisticCard;\n","// React\nimport React from 'react';\n\n// External\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst LoadingWheel: React.FC = () => {\n  return (\n    <div>\n      <CircularProgress\n        size={100}\n        color={'secondary'}\n        thickness={3.5}\n        variant={'indeterminate'}\n      />\n    </div>\n  );\n};\n\nexport default LoadingWheel;\n","// Axios/Api\nimport axios from 'axios';\n\n// Constants\nimport { COVID_19_BASE_API_URL } from '../constants/general';\n\n/**\n * Returns Global Statistics about Covid-19\n */\nexport const getCovid19Statistics = async () => {\n  return await axios.get(`${COVID_19_BASE_API_URL}/summary`).then((result) => result.data);\n};\n\n/**\n * Returns all the Countries that are affected by Covid-19\n */\nexport const getCovid19Countries = async () => {\n  return await axios.get(`${COVID_19_BASE_API_URL}/countries`).then((result) => result.data);\n};\n\n/**\n * Returns the detailed information about a Country based on Status given. (confirmed, deaths, recovered)\n *\n * @param {string} country\n * @param {string} status\n */\nexport const getCovid19StatisticsByCountryAndStatus = async (country: string, status: string) => {\n  return await axios\n    .get(`${COVID_19_BASE_API_URL}/total/country/${country}/status/${status}`)\n    .then((result) => result.data);\n};\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// Components\nimport StatisticCard from './StatisticCard';\nimport LoadingWheel from './LoadingWheel';\n\n// Api\nimport { getCovid19Statistics } from '../api/Covid19Api';\n\n// Constants\nimport { TOTAL_CONFIRMED, TOTAL_DEATHS, TOTAL_RECOVERED } from '../constants/general';\n\n// Interface\ninterface ICovid19Statistics {\n  Global: {\n    NewConfirmed: number;\n    TotalConfirmed: number;\n    NewDeaths: number;\n    TotalDeaths: number;\n    NewRecovered: number;\n    TotalRecovered: number;\n  };\n  Countries: [\n    {\n      TotalConfirmed: number;\n      NewConfirmed: number;\n      TotalDeaths: number;\n      NewDeaths: number;\n      TotalRecovered: number;\n    },\n  ];\n  Date: string;\n}\n\nconst GlobalStatistics = () => {\n  const [covid19Statistics, setCovid19Statistics] = useState<ICovid19Statistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    /**\n     * Get the Global Covid 19 Statistics\n     */\n    async function getCovid19Stats() {\n      setCovid19Statistics(await getCovid19Statistics());\n      setLoading(false);\n    }\n\n    if (loading && !covid19Statistics) {\n      getCovid19Stats();\n    }\n  });\n\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {!loading && covid19Statistics && (\n        <div className=\"Covid19__GlobalStatistics\">\n          <StatisticCard\n            title={TOTAL_CONFIRMED}\n            dateString={covid19Statistics.Date}\n            statistic={covid19Statistics.Global.TotalConfirmed}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_DEATHS}\n            dateString={covid19Statistics.Date}\n            statistic={covid19Statistics.Global.TotalDeaths}\n          ></StatisticCard>\n          <StatisticCard\n            title={TOTAL_RECOVERED}\n            dateString={covid19Statistics.Date}\n            statistic={covid19Statistics.Global.TotalRecovered}\n          ></StatisticCard>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GlobalStatistics;\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// CSS\nimport './CountryAreaChart.scss';\n\n// External\nimport { Area, AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Components\nimport LoadingWheel from './LoadingWheel';\n\n// Api\nimport { getCovid19StatisticsByCountryAndStatus } from '../api/Covid19Api';\n\n// Constants\nimport { DATE_PARSING_OPTIONS_CHARTS, NO_DATA_FOUND } from '../constants/general';\n\n// Interface\ninterface iCountryAreaChartProps {\n  country: string;\n}\ninterface ICovid19CountryStatistics {\n  Country: string;\n  Province: string;\n  Lat: number;\n  Lon: number;\n  Date: string;\n  Cases: number;\n  Confirmed: number;\n  Deaths: number;\n  Recovered: number;\n  Status: string;\n}\n\nconst CountryAreaChart: React.FC<iCountryAreaChartProps> = (props) => {\n  const { country } = props;\n\n  const [loading, setLoading] = useState(true);\n  const [covid19CountryStatistics, setCovid19CountryStatistics] = useState<ICovid19CountryStatistics[] | undefined>(\n    undefined,\n  );\n\n  useEffect(() => {\n    setLoading(true);\n    setCovid19CountryStatistics(undefined);\n    /**\n     * Gets the Statistics for a specific Country.\n     */\n    async function getCovid19CountryStatistics() {\n      const covid19StatisticsByCountry: ICovid19CountryStatistics[] = await getCovid19StatisticsByCountryAndStatus(\n        country,\n        'confirmed',\n      );\n      const covid19StatisticsByCountryDeaths: ICovid19CountryStatistics[] =\n        await getCovid19StatisticsByCountryAndStatus(country, 'deaths');\n      const covid19StatisticsByCountryRecovered: ICovid19CountryStatistics[] =\n        await getCovid19StatisticsByCountryAndStatus(country, 'recovered');\n\n      const covid19ResultWithConfirmed: ICovid19CountryStatistics[] | undefined =\n        await handleCovid19StatisticsByCountry(covid19StatisticsByCountry);\n\n      const covid19ResultWithDeaths: ICovid19CountryStatistics[] | undefined =\n        await handleCovid19StatisticsByCountryDeaths(covid19StatisticsByCountryDeaths, covid19ResultWithConfirmed);\n\n      const covid19ResultWithRecovered: ICovid19CountryStatistics[] | undefined =\n        await handleCovid19StatisticsByCountryRecovered(covid19StatisticsByCountryRecovered, covid19ResultWithDeaths);\n\n      setCovid19CountryStatistics(covid19ResultWithRecovered);\n      setLoading(false);\n    }\n\n    getCovid19CountryStatistics();\n    // We eslint-disable here because we don't want to watch our functions, as this would result in multiple rerenders.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [country]);\n\n  /**\n   * Convert all the DateTimes to Date's.\n   * @param {ICovid19CountryStatistics} covid19StatisticsByCountry\n   * @returns {array}\n   */\n  const handleCovid19StatisticsByCountry = async (covid19StatisticsByCountry: ICovid19CountryStatistics[]) => {\n    if (covid19StatisticsByCountry && Object.keys(covid19StatisticsByCountry).length > 0) {\n      return covid19StatisticsByCountry.map((country) => {\n        const dateToString = parseDate(country.Date);\n        // We change our DataSet here as we know we will only use it on this page.\n        country.Date = dateToString;\n        country.Confirmed = country.Cases;\n        return country;\n      });\n    }\n  };\n\n  /**\n   * Map the Cases to the original array as Deaths Cases.\n   * @param {ICovid19CountryStatistics} covid19StatisticsByCountryDeaths\n   * @param {ICovid19CountryStatistics} covid19ResultWithConfirmed\n   * @returns {array}\n   */\n  const handleCovid19StatisticsByCountryDeaths = async (\n    covid19StatisticsByCountryDeaths: ICovid19CountryStatistics[],\n    covid19ResultWithConfirmed: ICovid19CountryStatistics[] | undefined,\n  ) => {\n    if (\n      covid19StatisticsByCountryDeaths &&\n      covid19ResultWithConfirmed &&\n      Object.keys(covid19StatisticsByCountryDeaths).length > 0\n    ) {\n      return covid19ResultWithConfirmed.map((country) => {\n        const countryFound = covid19StatisticsByCountryDeaths.find(\n          (countryWithConfirmed) => parseDate(countryWithConfirmed.Date) === country.Date,\n        );\n\n        if (countryFound) country.Deaths = countryFound.Cases;\n        return country;\n      });\n    }\n  };\n\n  /**\n   * Map the Cases to the original array as Recovered Cases.\n   * @param {covid19StatisticsByCountryRecovered} covid19StatisticsByCountryDeaths\n   * @param {covid19ResultWithDeaths} covid19ResultWithConfirmed\n   * @returns {array}\n   */\n  const handleCovid19StatisticsByCountryRecovered = async (\n    covid19StatisticsByCountryRecovered: ICovid19CountryStatistics[],\n    covid19ResultWithDeaths: ICovid19CountryStatistics[] | undefined,\n  ) => {\n    if (\n      covid19StatisticsByCountryRecovered &&\n      covid19ResultWithDeaths &&\n      Object.keys(covid19StatisticsByCountryRecovered).length > 0\n    ) {\n      return covid19ResultWithDeaths.map((country) => {\n        const countryFound = covid19StatisticsByCountryRecovered.find(\n          (countryWithDeaths) => parseDate(countryWithDeaths.Date) === country.Date,\n        );\n\n        if (countryFound) country.Recovered = countryFound.Cases;\n        return country;\n      });\n    }\n  };\n\n  /**\n   * Parse the DateTime to a easy to read Date.\n   * @param {string} countryDate\n   */\n  const parseDate = (countryDate: string) => {\n    const date = new Date(Date.parse(countryDate));\n    //@ts-ignore\n    return date.toLocaleDateString('nl-NL', DATE_PARSING_OPTIONS_CHARTS);\n  };\n\n  return (\n    <>\n      {loading && <LoadingWheel />}\n      {covid19CountryStatistics && (\n        <div style={{ width: '80%', height: 300 }} className=\"CountryAreaChart\">\n          <ResponsiveContainer>\n            <AreaChart width={600} height={400} data={covid19CountryStatistics}>\n              <CartesianGrid strokeDasharray=\"1 1\" />\n              <XAxis dataKey=\"Date\" />\n              <YAxis />\n              <Tooltip />\n              <Legend verticalAlign=\"top\" height={36} />\n              <Area type=\"monotone\" dataKey=\"Confirmed\" fillOpacity={0.5} stroke=\"#027be3\" fill=\"#027be3\" />\n              <Area type=\"monotone\" dataKey=\"Deaths\" fillOpacity={0.5} stroke=\"#f44336\" fill=\"#f44336\" />\n              <Area type=\"monotone\" dataKey=\"Recovered\" fillOpacity={0.5} stroke=\"#009688\" fill=\"#009688\" />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n      {!covid19CountryStatistics && !loading && (\n        <div className=\"CountryAreaChart__Country--undefined\">{NO_DATA_FOUND}</div>\n      )}\n    </>\n  );\n};\n\nexport default CountryAreaChart;\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// CSS\nimport './SearchForm.scss';\n\n// Material UI\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// Constants\nimport { SEARCH_FORM_INPUT_TEXT, SEARCH_FORM_HELPER_TEXT } from '../constants/general';\n\n// Apis\nimport { getCovid19Countries } from '../api/Covid19Api';\n\n// Interface\ninterface ISearchFormProps {\n  setCountryState: Function;\n}\ninterface iCovid19Country {\n  Country: string;\n  Slug: string;\n}\n\nconst SearchForm: React.FC<ISearchFormProps> = (props) => {\n  const [input, setInput] = useState('');\n  const [countries, setCountries] = useState<iCovid19Country[] | undefined>(undefined);\n\n  const handleCountryChange = (event: any) => {\n    setInput(event.target.value);\n    props.setCountryState(event.target.value);\n  };\n\n  useEffect(() => {\n    /**\n     * Get the Countries affected by Covid 19.\n     */\n    async function getCovid19CountriesByApi() {\n      setCountries(await getCovid19Countries());\n    }\n\n    getCovid19CountriesByApi();\n  }, []);\n\n  countries &&\n    countries.sort(function (countryA, countryB) {\n      if (countryA.Country.toLowerCase() < countryB.Country.toLowerCase()) return -1;\n      if (countryA.Country.toLowerCase() > countryB.Country.toLowerCase()) return 1;\n      return 0;\n    });\n\n  return (\n    <FormControl>\n      <InputLabel id=\"country__input--label\">{SEARCH_FORM_INPUT_TEXT}</InputLabel>\n      <Select value={input} onChange={handleCountryChange} id=\"country__input\" labelId=\"country__input--label\">\n        {countries &&\n          countries.map((country) => {\n            return (\n              <MenuItem key={country.Country} value={country.Slug}>\n                {country.Country}\n              </MenuItem>\n            );\n          })}\n      </Select>\n      <FormHelperText>{SEARCH_FORM_HELPER_TEXT}</FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default SearchForm;\n","// React\nimport React, { useState } from 'react';\n\n// CSS\nimport './App.scss';\n\n// Components\nimport GlobalStatistics from './components/GlobalStatistics';\nimport CountryAreaChart from './components/CountryAreaChart';\nimport SearchForm from './components/SearchForm';\n\n// Constants\nimport {\n  COVID_19_HEADER,\n  FOOTER_GENERAL_HEADER,\n  FOOTER_RAPID_HEADER,\n  FOOTER_RAPID_PARAGRAPH,\n  FOOTER_CASES_HEADER,\n  FOOTER_CASES_PARAGRAPH,\n} from './constants/general';\n\nconst App = () => {\n  const [country, setCountry] = useState('');\n\n  const setCountryState = async (country: string) => {\n    setCountry(country);\n  };\n\n  return (\n    <div className=\"Covid19\">\n      <header className=\"Covid19__Header\">{COVID_19_HEADER}</header>\n      <div className=\"Covid19__GlobalStatistics\">\n        <GlobalStatistics />\n      </div>\n      <div className=\"Covid19__SearchForm\">\n        <SearchForm setCountryState={setCountryState} />\n      </div>\n      <div className=\"Covid19__CountryAreaChart\">{country && <CountryAreaChart country={country} />}</div>\n      <footer className=\"Covid19__Footer\">\n        <h3 className=\"Covid19__Footer--h3\">{FOOTER_GENERAL_HEADER}</h3>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_RAPID_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_RAPID_PARAGRAPH}</p>\n        <h4 className=\"Covid19__Footer--h4\">{FOOTER_CASES_HEADER}</h4>\n        <p className=\"Covid19__Footer--p\">{FOOTER_CASES_PARAGRAPH}</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './index.scss';\n\n// Components\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}